generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model checklists {
  id           Int                     @id @default(autoincrement())
  employee_id  String
  id_card      Boolean
  cell_phone   Boolean
  laptop       Boolean
  files        Boolean
  key_s        Boolean
  check_status checklists_check_status
}

model employee_complants_advices_suggestions {
  id          Int                                                @id @default(autoincrement())
  employee_id String                                             @db.VarChar(255)
  create_at   DateTime                                           @default(now()) @db.Date
  message     String                                             @db.LongText
  status      employee_complants_advices_suggestions_status
  letter_type employee_complants_advices_suggestions_letter_type
}

model employee_leaves {
  id              Int                             @id @default(autoincrement())
  employee_id     String                          @db.VarChar(255)
  leave_status    employee_leaves_leave_status
  leave_dates     String                          @db.VarChar(255)
  reason          String                          @db.Text
  permission_type employee_leaves_permission_type
}

model employee_letters {
  id          Int                          @id @default(autoincrement())
  employee_id String                       @db.VarChar(255)
  letter_type employee_letters_letter_type
  letter      String                       @db.VarChar(255)
  create_at   DateTime                     @default(now()) @db.DateTime(0)
}

model employee_resignation {
  id                 Int                                     @default(autoincrement())
  employee_id        String                                  @id
  reason             String                                  @db.LongText
  create_at          DateTime                                @default(now()) @db.Date
  end_date           DateTime                                @db.Date
  start_date         DateTime                                @db.Date
  status             employee_resignation_status
  send_check_list    employee_resignation_send_check_list
  send_feedback_form employee_resignation_send_feedback_form

  @@index([id], map: "id")
}

model event_attendees {
  id          Int    @unique(map: "id")
  event_id    String @db.VarChar(255)
  attendee_id String @db.VarChar(255)
  events      events @relation(fields: [event_id], references: [event_id], onUpdate: Restrict, map: "event_to_attendees")

  @@index([event_id], map: "event_to_attendees")
}

model events {
  id              Int
  event_id        String            @id @db.VarChar(255)
  create_by       String            @db.VarChar(255)
  event_attendees event_attendees[]

  @@index([id], map: "id")
}

model feedback {
  id              Int             @default(autoincrement())
  feed_from_id    Int             @default(1)
  employee_id     String          @id @db.VarChar(255)
  fed_question_1  String          @db.Text
  fed_question_2  String          @db.Text
  fed_question_3  String          @db.Text
  fed_question_4  String          @db.Text
  fed_question_5  String          @db.Text
  fed_question_6  String          @db.Text
  fed_question_7  String          @db.Text
  fed_question_8  String          @db.Text
  fed_question_9  String          @db.Text
  fed_question_10 String          @db.Text
  fed_question_11 String          @db.Text
  status          feedback_status
  create_at       DateTime        @default(now()) @db.Date

  @@index([id], map: "id")
}

model feedback_questions {
  id              Int    @id @default(autoincrement())
  feed_from_id    Int    @default(1)
  feed_quasion_id Int
  question        String @db.VarChar(255)
}

model task {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  attachment  String
  team        String
  employee_id String
  start_date  DateTime    @db.Date
  end_date    DateTime    @db.Date
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  status      task_status
  priority    String?     @default("low")
}

model users {
  id             Int     @id @default(autoincrement())
  first_name     String
  last_name      String
  email          String  @unique
  phone          String
  dob            String
  gender         String
  country        String
  city           String
  zip_code       String
  sudo_name      String
  blood_group    String
  marital_status String
  department     String
  designation    String
  doj            String
  employee_id    String
  password       String
  profile_img    String? @default("avather.png")
}

enum checklists_check_status {
  pending
  completed
  EMPTY_ENUM_VALUE  @map("")
}

enum employee_complants_advices_suggestions_status {
  pending
  accepted
  rejected
  EMPTY_ENUM_VALUE  @map("")
}

enum employee_complants_advices_suggestions_letter_type {
  complaints
  advices_suggestions
}

enum employee_leaves_leave_status {
  pending
  accepted
  rejected
  EMPTY_ENUM_VALUE  @map("")
}

enum employee_leaves_permission_type {
  EMPTY_ENUM_VALUE  @map("")
  leave
  latelogin
  earlylogout
}

enum employee_letters_letter_type {
  probation
  offer
  increment
  relieving
  exprience
  others
}

enum employee_resignation_status {
  pending
  accepted
  rejected
  EMPTY_ENUM_VALUE  @map("")
}

enum employee_resignation_send_check_list {
  pending
  awaiting
  completed
}

enum employee_resignation_send_feedback_form {
  pending
  awaiting
  completed
}

enum feedback_status {
  pending
  send
  EMPTY_ENUM_VALUE  @map("")
}

enum task_status {
  draft
  pending
  completed
  started
  EMPTY_ENUM_VALUE  @map("")
}
