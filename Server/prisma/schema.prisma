generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model checklists {
  id           Int                     @id @default(autoincrement())
  employee_id  String
  id_card      Boolean
  cell_phone   Boolean
  laptop       Boolean
  files        Boolean
  key_s        Boolean
  check_status checklists_check_status
}

model employee_complants_advices_suggestions {
  id          Int                                                @id @default(autoincrement())
  employee_id String                                             @db.VarChar(255)
  created_at  DateTime                                           @default(now()) @db.Date
  message     String                                             @db.LongText
  status      employee_complants_advices_suggestions_status
  letter_type employee_complants_advices_suggestions_letter_type
}

model employee_leaves {
  id              Int                             @id @default(autoincrement())
  employee_id     String                          @db.VarChar(255)
  leave_status    employee_leaves_leave_status
  leave_dates     String                          @db.VarChar(255)
  reason          String                          @db.Text
  permission_type employee_leaves_permission_type
}

model employee_letters {
  id          Int                          @id @default(autoincrement())
  employee_id String                       @db.VarChar(255)
  letter_type employee_letters_letter_type
  letter      String                       @db.VarChar(255)
  created_at  DateTime                     @default(now()) @db.Timestamp(6)
}

model employee_resignation {
  id                 Int                                     @default(autoincrement())
  employee_id        String                                  @id
  reason             String                                  @db.LongText
  end_date           DateTime                                @db.Date
  start_date         DateTime                                @db.Date
  status             employee_resignation_status
  send_check_list    employee_resignation_send_check_list
  send_feedback_form employee_resignation_send_feedback_form
  created_at         DateTime                                @default(now()) @db.Timestamp(6)

  @@index([id], map: "id")
}

model event_attendees {
  id          Int     @id @default(autoincrement())
  event_id    String
  events      events  @relation(fields: [event_id], references: [event_id], onUpdate: Restrict, onDelete: Cascade)
  email       String?
  name        String?
  phone       String?
  location    String? @db.VarChar(255)
  response    String? @db.Text
  attendee_id String? @db.VarChar(255)
  attendee    users?  @relation(fields: [attendee_id], references: [employee_id])
}

model events {
  event_id         String            @id @default(uuid())
  created_by       String
  creator          users             @relation(fields: [created_by], references: [employee_id])
  title            String
  description      String?           @db.VarChar(255)
  start            DateTime
  end              DateTime
  kind             String
  status           String?           @db.VarChar(255)
  interview_status String?           @db.Text
  event_attendees  event_attendees[]
}

model recruits {
  id                              Int     @id @default(autoincrement())
  first_name                      String
  last_name                       String?
  location                        String?
  phone                           String?
  present_ctc                     String?
  expected_ctc                    String?
  experience                      Float?
  maritial_status                 String?
  highest_education_qualification String?
  previous_company                String?

}

model feedback {
  id              Int             @default(autoincrement())
  feed_from_id    Int             @default(1)
  employee_id     String          @id @db.VarChar(255)
  fed_question_1  String          @db.Text
  fed_question_2  String          @db.Text
  fed_question_3  String          @db.Text
  fed_question_4  String          @db.Text
  fed_question_5  String          @db.Text
  fed_question_6  String          @db.Text
  fed_question_7  String          @db.Text
  fed_question_8  String          @db.Text
  fed_question_9  String          @db.Text
  fed_question_10 String          @db.Text
  fed_question_11 String          @db.Text
  status          feedback_status
  created_at      DateTime        @default(now()) @db.Timestamp(6)

  @@index([id], map: "id")
}

model feedback_questions {
  id               Int    @id @default(autoincrement())
  feed_from_id     Int    @default(1)
  feed_question_id Int
  question         String @db.VarChar(255)
}

model task {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  attachment  String
  team        String
  employee_id String
  start_date  DateTime       @db.Date
  end_date    DateTime       @db.Date
  status      task_status    @default(pending)
  priority    tasks_priority @default(low)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @default(now()) @updatedAt
}

enum tasks_priority {
  high
  medium
  low
}

model users {
  id             Int               @id @default(autoincrement())
  first_name     String
  last_name      String
  sudo_name      String?
  role           users_role        @default(user)
  email          String            @unique
  phone          String?
  dob            DateTime?         @db.Date
  doj            DateTime?         @db.Date
  gender         String?
  designation    String?
  country        String?
  city           String?
  zip_code       String?
  blood_group    String?
  marital_status String?
  profile_img    String?           @default("avater.png")
  department     String?
  employee_id    String            @unique
  password       String
  created_at     DateTime          @default(now()) @db.Timestamp(6)
  updated_at     DateTime          @default(now()) @updatedAt @db.Timestamp(6)
  events         events[]
  event_attendee event_attendees[]
  attendance     attendance[]
}

model attendance {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  log_in      DateTime  @default(now()) @db.Timestamp(0)
  log_out     DateTime? @db.Timestamp(0)
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime  @default(now()) @db.Timestamp(0)
  employee_id String?
  users       users?    @relation(fields: [employee_id], references: [employee_id], map: "Attendance_user_id_fkey")
  breaks      breaks[]
}

model breaks {
  id           Int         @id @default(autoincrement()) @db.UnsignedInt
  break_start  DateTime    @default(now()) @db.Timestamp(0)
  break_end    DateTime?   @db.Timestamp(0)
  attendanceId Int?        @db.UnsignedInt
  attendance   attendance? @relation(fields: [attendanceId], references: [id], map: "Break_attendanceId_fkey")

  @@index([attendanceId], map: "Break_attendanceId_fkey")
}

enum users_role {
  user
  hr
  admin
}

enum checklists_check_status {
  pending
  completed
  EMPTY_ENUM_VALUE  @map("")
}

enum employee_complants_advices_suggestions_status {
  pending
  accepted
  rejected
  EMPTY_ENUM_VALUE  @map("")
}

enum employee_complants_advices_suggestions_letter_type {
  complaints
  advices_suggestions
}

enum employee_leaves_leave_status {
  pending
  accepted
  rejected
  EMPTY_ENUM_VALUE  @map("")
}

enum employee_leaves_permission_type {
  EMPTY_ENUM_VALUE  @map("")
  leave
  latelogin
  earlylogout
}

enum employee_letters_letter_type {
  probation
  offer
  increment
  relieving
  exprience
  others
}

enum employee_resignation_status {
  pending
  accepted
  rejected
  EMPTY_ENUM_VALUE  @map("")
}

enum employee_resignation_send_check_list {
  pending
  awaiting
  completed
}

enum employee_resignation_send_feedback_form {
  pending
  awaiting
  completed
}

enum feedback_status {
  pending
  send
  EMPTY_ENUM_VALUE  @map("")
}

enum task_status {
  draft
  pending
  completed
  started
  EMPTY_ENUM_VALUE  @map("")
}
